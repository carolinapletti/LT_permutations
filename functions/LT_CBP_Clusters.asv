function [mean_h0_cell, std_h0_cell, zmap_cell, max_cluster_sizes_cell] = LT_CBP_Clusters(diffmap_cell, permmaps_cell, zval, n_permutes, fqs, tps)
% LT_CBP_Clusters
% Performs cluster-based correction for time-frequency maps of coherence differences.
% Computes Z-maps, thresholds them based on a Z-value, and estimates cluster sizes from permutation tests.

% Inputs:
% - diffmap_cell: Cell array containing difference maps (real - RPA) for each channel.
% - permmaps_cell: Cell array containing null hypothesis maps (from permutations) for each channel.
% - zval: Z-threshold for significance (e.g., corresponding to p = 0.05).
% - n_permutes: Number of permutations performed.
% - fqs: Frequency points.
% - tps: Time points.

% Outputs:
% - mean_h0_cell: Cell array of mean null hypothesis maps for each channel.
% - std_h0_cell: Cell array of standard deviation null hypothesis maps for each channel.
% - zmap_cell: Cell array of thresholded Z-maps for each channel.
% - max_cluster_sizes_cell: Cell array of maximum cluster sizes from permutation tests for each channel.

% written by Carolina Pletti (carolina.pletti@gmail.com) based on
% the script "uANTS_stats_SOL.m" by Mike X Cohen, which is part of the
course "Neural signal processing
% and analysis: Zero to hero"
    
    % Step 1: Initialize output cells
    %prepare cells to store results
    mean_h0_cell = cell(1,length(diffmap_cell));
    std_h0_cell = cell(1,length(diffmap_cell));
    zmap_cell = cell(1,length(diffmap_cell));
    max_cluster_sizes_cell = cell(1,length(diffmap_cell));


    %for each channel

    for i = 1:length(diffmap_cell)
    
        %extract relevant data matrices
        permmaps = permmaps_cell{1,i};
        diffmap = diffmap_cell{1,i};
    
        % compute mean and standard deviation maps
        mean_h0 = squeeze(mean(permmaps, "omitnan"));
        mean_h0_cell{1,i} = mean_h0;
        std_h0  = squeeze(std(permmaps, "omitnan"));
        std_h0_cell{1,i} = std_h0;

        % now threshold real data...
        % first Z-score
        zmap = (diffmap-mean_h0) ./ std_h0;

        % threshold image at p-value, by setting subthreshold values to 0
        zmap(abs(zmap)<zval) = 0;

        % also set all NaNs to 0 in the z map
        zmap(isnan(zmap))=0;
    
        zmap_cell{1,i} = zmap;

        %%% now some plotting...

        figure, clf
        
        
        subplot(121)
        imagesc(tps,fqs,diffmap);
        xlabel('Time (ms)'), ylabel('Frequency (Hz)')
        title('TF map of real power values')

        subplot(122)
        imagesc(tps,fqs,zmap);
        xlabel('Time (ms)'), ylabel('Frequency (Hz)')
        title('Thresholded TF map of Z-values')

        % initialize matrices for cluster-based correction
        max_cluster_sizes = zeros(1,n_permutes);


        % loop through permutations
        for permi = 1:n_permutes
    
            % take each permutation map, and transform to Z
            threshimg = squeeze(permmaps(permi,:,:));
            threshimg = (threshimg-mean_h0)./std_h0;
    
            % threshold image at p-value
            threshimg(abs(threshimg)<zval) = 0;
    
    
            % find clusters (need image processing toolbox for this!)
            islands = bwconncomp(threshimg);
            if numel(islands.PixelIdxList)>0
        
                % count sizes of clusters
                tempclustsizes = cellfun(@length,islands.PixelIdxList);
        
                % store size of biggest cluster
                max_cluster_sizes(permi) = max(tempclustsizes);
            end
        end
        max_cluster_sizes_cell{1,i} = max_cluster_sizes;
    end
end